This file serves as a high-level, math-based summary of the OPAQUE protocol. 
It can be especially helpful for readers who don't want to delve deeply into 
implementation details but rather want to understand the core process of the 
OPAQUE protocol. This file is supposed to provide answers to the following 
questions:

What is OPAQUE (and its purpose)?
What protocols does OPAQUE consist of (and what is the math behind them)?
How does OPAQUE work - a summary?


1) What is OPAQUE (and it's purpose)?
-------------------------------------

This document describes the OPAQUE protocol, a secure asymmetric 
password-authenticated key exchange (aPAKE) that supports mutual 
authentication in a client-server setting without reliance on PKI 
and with security against pre-computation attacks upon server 
compromise. In addition, the protocol provides forward secrecy 
and the ability to hide the password from the server, even during
password registration. Essentially, the server knows nothing about 
the client's password and does not store any client passwords, etc.


2) What protocols OPAQUE consists of (and math behind)?
-------------------------------------------------------
OPAQUE consists of two stages: registration and authenticated
key exchange. In the first stage, a client registers its password
with the server and stores information used to recover 
authentication credentials on the server. Recovering these 
credentials can only be done with knowledge of the client password. 
In the second stage, a client uses its password to recover those 
credentials and subsequently uses them as input to an AKE protocol. 
This stage has additional mechanisms to prevent an active attacker 
from interacting with the server to guess or confirm clients 
registered via the first phase.


2.1) Oblivious Pseudorandom Function (OPRF)
--------------------------------------------
An Oblivious Pseudorandom Function (OPRF) is a two-party protocol 
between client and server for computing a PRF, where the PRF key 
is held by the server and the input to the function is provided 
by the client. The client does not learn anything about the PRF 
other than the obtained output and the server learns nothing about 
the client's input or the function output.


2.2) Math behinf OPRF
----------------------
Basically math used in OPAQUE for OPRF is pretty simple:

  0)  Client hold input 't' (this could be password), 
      Server holds secret key 'x'
  
  1)  Client generates random 'blind' value, 
  which is just a random number from GF (Galois Field)           
                                             
  2)  Client computes T = H_1(t) and then blinds it by computing rT      
                                             
  3)  Client sends M = rT to Server, note that M is known
  as blinded_element in our case

  4)  Server computes Z = xM and returns Z to Clinet
  
  5)  Clinet computes (1/r)*Z = xT = N and stores the pair (t,N) 
  for some point in the future

Why do we actually need OPRF, and what is its purpose in OPAQUE? 
Well, the whole registration stage is pretty much the OPRF protocol 
with some additional tweaks. Let's recall OPAQUE's registration diagram:

    creds                                   parameters
      |               (step 0)                  |
      v                                         v
    Client                                    Server
    ------------------------------------------------
          registration request (steps 1,2,3)
             ------------------------->
          registration response (step 4)
             <-------------------------
                    record (step 5)
             ------------------------->
   ------------------------------------------------
      |                                         |
      v                                         v
  export_key                                 record

As you can see in the diagram above, steps 1-3 are used during 
the construction of the registration request. In the process 
of creating the registration response, step 4 takes place. 
Lastly, the construction of the record includes step 5. Note 
that OPRF steps are the core of the registration stage. 
The registration stage contains non-OPRF steps and additional 
tweaks, such as the creation of the envelope, etc. The envelope 
is a special structure created by the client (subsequently sent 
to the server). The server then stores just the envelope 
(no client password, no salt, etc.).

Now back to the question, 'What is the purpose of OPRF in OPAQUE?' 
As shown in the diagram above, the client uses its password to later 
compute 'N' (oprf_output) from the client's 'Z'. This oprf_output 
is then used to create the so-called 'randomized_password' using 
the hkdfExtract function. Based on the randomized_password, 
the client generates an envelope, client_public_key, 
masking_key, and export_key."

    envelope - client's structure, that contains envelope_nonce, auth_tag 
    client_private_key - the encoded client private key for the AKE protocol
    masking_key - an encryption key used by the server with the sole purpose
    of defending against client enumeration attacks
    export_key - additional clinet key for application specific purposes e.g.
    remote encrypted storage as discussed in online_login_step_4.c

Client's envelope with other values discussed above is generated using
Store() function during offline registration and recover later (using function 
Recover()) later during online login stage. These functions will be covered
later in this file.

** HMAC-based Extract-and-Expand Key Derivation Function (HKDF) - A Key 
Derivation Function (KDF) is a function that takes some source of initial 
keying material and uses it to derive one or more cryptographically 
strong keys. In OPAQUE, there are 2 main function used from HKDF(for 
sha512 in case of our implementation) Extract() and Expand().

Extract - a pseudorandom key of fixed length Nx bytes from input 
keying material ikm and an optional byte string salt.

Expand - a pseudorandom key prk using the optional string info 
into L bytes of output keying material.

[https://www.rfc-editor.org/rfc/rfc5869]


2.3 AKE 

The online login stage is a bit more complicated. Login consists of two
parts: OPRF and AKE. In this stage, a client uses its password to 
recover those credentials (OPRF part) and subsequently uses them as 
input to an AKE protocol. The AKE protocol is used to generate the 
session_key. Note that the session_key differs from login to login. 
In other words, every time a user logs in to a server, a new session_key 
will be generated to encrypt communication. Not only is the session_key 
generated, but also the export_key. Note that the export_key is not 
unique for every communication; it remains the same (the same export_key 
as generated during the registration stage). This export_key can be 
used for application-specific purposes (discussed above) or not used at all.

One thing that has not been mentioned so far is the presence of multiple private 
and public keys. To make things clear, we will explain the magic behind those keys. 
First of all, we'll talk about the 'general' public and private keys. 
The server generates its private and public general keys using the 
DeriveKeyPair(server_private_key, server_public_key) function before 
communication. On the other hand, the client generates its general 
public key (client_public_key) during the registration phase, using the 
Store() function when creating the registration request. Note that the 
client's general private key (client_private_key) is not generated so 
far (cleared from the stack in our implementation). The client's private 
key will be safely restored later.

Both the client and the server also generate so-called AKE public 
and private keys. The client generates AKE keys (client_public_keyshare, 
client_secret-private AKE key) during the first AKE message. The server 
also generates AKE keys (server_public_keyshare, server_secret-private AKE key). 
This is done in the AKE part of the login when the server constructs the second AKE 
message. Note that when talking about AKE and KE messages in this document, 
we refer to the same thing, and we will be using these two terms interchangeably

We can see flow of login stage in diagram below:

     creds                             (parameters, record)
        |                                         |
        v                                         v
      Client                                    Server
      ------------------------------------------------
                     AKE message 1
               ------------------------->
                     AKE message 2
               <-------------------------
                     AKE message 3
               ------------------------->
     ------------------------------------------------
        |                                         |
        v                                         v
  (export_key, session_key)                  session_key



2.3.1 First AKE message
-----------------------

The login stage is initiated by the client. The client needs to generate the KE1 
message and send it to the server. The KE1 message consists of CredentialRequest 
and AuthRequest structures. In other words, the client needs to generate a blinded 
message (OPRF phase, the same as during registration). This is stored in the 
CredentialRequest structure. In the AuthRequest structure, client's public 
information, such as the client's public AKE key and public nonce (public nonce 
will be discussed later), is stored. The client also creates its own 
structure to hold private information like the password, blind (random 
scalar - OPRF phase), AKE private key (client_secret), and also a copy of 
the KE1 message. See the figure below:

CLIENT'S OUTPUT - AKE 1:
------------------------

ClienState  --> password
            --> blind // OPRF part (random scalar r)
            --> ClientAkeState  --> client_secret // AKE private key
                                --> KE1 // copy of KE1 message

KE1 --> CredentialRequest --> blinded_msg // OPRF part (M = rT)
    --> AuthRequest --> public_nonce // used later in preamble
                    --> client_public_keyshare // AKE public key



2.3.2 Second AKE message
------------------------
When the server receives the KE1 message from the client, it calculates 
the evaluated_message, which is the OPRF step on the server-side. This 
is the same as registration step 4 discussed previously. Besides that, 
the server also generates a masking_nonce (from the RNG) and calculates 
the masked_response. The masked response is calculated in a very specific 
manner:

  masked_response = (credential_response_pad) XOR (server_public_key) || envelope),

where server_public_key is the server's 'general' public key and envelope. Note that the 
envelope is a structure that was created during registration and is stored in the server's 
database. One missing piece from the formula above is credential_response_pad, which is a 
value expanded (using hkdfExpand) from the masking_key, masking_nonce, and some credential 
response label—an array of bytes defined in the OPAQUE protocol specification. These values 
form the CredentialResponse structure. Note that the masked_response is later used by the 
client to recover an envelope (AKE3).

In the KE2 message, the AuthResponse structure is also present, which the server needs to form. 
It consists of server_nonce (from RNG), server_public_keyshare (AKE key), and server_mac. We 
will go deeper in a bit, but first, a quick summary.

We can divide the forming of the second AKE message into two steps. The first step is to create 
the evaluated_msg (OPRF step 4), generate the masking_key, and calculate the masked_response. 
The next step is the logic behind the actual AKE.

Now let's talk about the AKE logic. In this particular implementation, we use the 3DH protocol, 
a 3-message AKE that satisfies forward secrecy. The basic idea behind 3DH is to create IKM (input 
key material) by combining the 'general' and AKE private server keys with the client's 'general' 
and AKE public keys on the server-side. Later, when forming the AKE3 message, the client will 
generate IKM from the 'general' and AKE private client keys with the server's 'general' 
and AKE public keys.

When forming AKE2 on server-side, ikm looks like this:

  ikm = server_secret(AKE) * client_public_keyshare(AKE) ||
        server_private_key * client_public_keyshare(AKE) ||
        server_secret(AKE) * client_public_key

where '||' denotes byte-concatination.

Why do we actually need IKM? From IKM, the server can generate three things: KM2, KM3, and 
session_key. As mentioned above, 3DH provides forward secrecy because, on every login, 
new AKE keys are generated. Key material KM2 is then used to form the server_mac, 
and KM3 is used to form the expected_client_mac. These MAC (Message Authentication Code) 
messages are used to verify the client/server, respectively. The server sends its MAC 
to the client, and the client (in AKE3 step) generates the expected_server_mac. 
These must match (verification step).

On the other hand, the client also sends its client_mac (in AKE3 message) to the server, 
which already calculates (in AKE2 step) the expected_client_mac. If they match, they use 
the session_key for encrypted communication (this is known as the finalization phase of AKE).

* Note that to form km2, km3 and session_key we need to construct preamble, which
is just byte-concatenation of client_identity, ke1, server_identity and ke2 (without server_mac).

See the diagram below to better understand what the server will hold/generate when forming AKE2.

SERVER'S OUTPUT - AKE 2:
------------------------

ServerState --> expected_client_mac
            --> session_key

KE2 --> CredentialResponse  --> evaluated_msg // OPRF (step 4)
                            --> masking_nonce // from rng
                            --> masking_response  // (cred_response_pad) 
                                                  // XOR (server_public_key || envelope)
    
    --> AuthResponse  --> server_nonce // from rng
                      --> server_public_keyshare // AKE key
                      --> server_mac






2.3.3 Third AKE message
------------------------

In this step, the client gets the KE2 message from the server but also holds 
a copy of the KE1 message in its state (ClientState->ClientAkeState->KE1), 
along with other private values. Now, the client is ready to form the KE3 
message. This can be divided into two steps: RecoverCredentials and 3DH finalization.

First, let's discuss the RecoverCredentials stage. This is the last step of 
the OPRF protocol, where the client needs to perform the OPRF finalization step, 
which is to calculate (1/r)*Z = xT = N. Recall the OPRF step from the registration 
stage of the OPAQUE protocol. The next step is to retrieve the client's envelope, 
which is stored on the server. To do so, the client needs to use the HKDF function 
for extraction/expansion of the randomized_password.

A randomized_password is just a concatination of hash(N), which is
speciffically hashed oprf output N, and hardened hash(N).
It may look like this:

  oprf_output // hash(N);
  randomized_password = hkdfExtract(oprf_output || Harden(oprf_output)),

  where the function 'Harden' could be any Key Stretching Function (KSF). 
  In this case, it is the identity function, which is the same as in the 
  OPAQUE specification. The identity function returns the same value on 
  the output as the input. In other words, msg = Identity(msg), which 
  could be simply implemented as memcpy. So, in our case, the 
  randomized_password would look like this:

  oprf_output // hash(N);
  randomized_password = hkdfExtract(oprf_output || oprf_output)

Now, when the client has its randomized_password, it can expand the masking_key 
(using hkdfExpand) from the randomized_password. The client also recreates 
credential_response_pad (recall credential_response_pad from AKE2), which is 
the same process as it was on the server-side and also results in the same value. 
It roughly looks like this:
  
    credential_response_pad = credential_response_pad = Expand(masking_key, (masking_nonce || "CredentialResponsePad"))

    *Note that while client can generate masking_key, server needs to get it during 
    registration step (in client's record response message).


So far, the client has retrieved the randomized_password and credential_response_pad from it. 
But why does he actually need credential_response_pad? It's simple—recall that the server 
sends the masked_response in KE2 to the client, which means that at this point, 
the client already has KE2->CredentialResponse->masked_response. Masked response will
be used to retrieve server_public_key and envelope.

Server calculates masked_response as:

  masked_response = (credential_response_pad) XOR (server_public_key) || envelope),

since client recreated credential_response_pad, it is easy for 
him to get server_public_key and envelope. All he needs to do 
is to xor credential_response_pad and masked_response.


1.) (server_public_key) || envelope) = masked_response XOR credential_response_pad
    
                                  ...

   (credential_response_pad) XOR (server_public_key) || envelope) XOR credential_response_pad


Now, the client can retrieve the client_private_key and export key using the Recover() function, 
where the input values are the randomized_password, server_public_key, envelope, server_identity, 
and client_identity.

  /**
    * Server's identity is also something publicly known. 
    * This is typically a domain name, e.g., example.com. 
    * If not specified, it defaults to the server's public 
    * key. Server also needs to generate it's primary public
    * and private key. Server also chooses a seed (oprf_seed)
    * of Nh bytes for the OPRF. The server can use server private
    * key and server_public_key with multiple clients. The server
    * can also opt to use different seeds for each client,
    * so long as they are maintained across the registration and online
    * AKE stages, and kept consistent for each client (since 
    * an inconsistent mapping of clients to seeds could leak information.
  **/

Function Recover() internally recreate auth_tag and verify against auth_tag
that from envelope.

        expected_tag == envelope.auth_tag

If those are not the same, an error will occur. This is a prevention against 
attackers because only the server that the client is registered on has a valid 
envelope. Recall that registration is done out-of-band or using PKI, so we 
assume that registration is done safely.

This is end of RecoverCredentials part of AKE3.


The second part is the 3DH finalization step. This is actually pretty straightforward, 
as we already discussed most of the concepts previously. The client generates IKM, 
which is very similar to what the server did in AKE2. However, now IKM formation 
is on the client-side and looks like this:

ikm = client_secret(AKE) * server_public_keyshare(AKE)   ||
        client_secret(AKE) * server_public_key           ||
        client_private_key * server_public_keyshare(AKE) 

where '||' denotes byte-concatination.

After the server generates IKM, it also needs to construct the preamble (similar to what 
the server did in AKE2). Now, the client is able to generate its KM2, KM3, and session_key. 
It can get the expected_server_mac from KM2, which is then compared to the server_mac that 
comes from the server in the KE2 message. The client also creates the client_mac from KM3 
and sends it to the server.

Note that the server already holds the expected_client_mac, which it calculates 
during KE2 formation.

The last step of the entire OPAQUE protocol is on the server-side. The server 
needs to verify if the client_mac (in the KE3 message) is identical to the 
expected_client_mac. If so, the client and server can use the session_key 
to encrypt their conversation.

2.4 Store() & Recover() #TODO