This is readme just for me.

I2OSP (converzia byte - int v RSA specs) !NOTE big endian:
https://stackoverflow.com/questions/60019799/getting-an-integer-value-from-a-byte-string-in-python3
https://www.rfc-editor.org/rfc/rfc8017#section-4.1

OPRF reference code:
https://github.com/stef/liboprf/blob/master/oprf.c


// Function to perform Integer to Octet String (I2OSP) conversion
void I2OSP(uint64_t x, int xLen, unsigned char *output) {
    // Check if x is too large to fit in xLen bytes
    if (x >= (1ULL << (8 * xLen))) { //rethink
        fprintf(stderr, "Integer too large for I2OSP\n");
        return;
    }

    // Convert the integer x to an octet string
    for (int i = xLen - 1; i >= 0; i--) {
        output[i] = (unsigned char)(x & 0xFF); // Extract the lowest 8 bits
        x >>= 8; // Shift the integer right by 8 bits
    }
}


OPRF:


WHAT DO I NEED FROM OPRF in OPAQUE???

1) OPRF:
	client:
		BLIND(blind, blinded_element) ->HashToGroup(SHA512("HashToGroup-" || contextString)) + slaclar mult ->ristretto255
		Finalize(element, blind, evaluated_element) -> ScalarInverse, scalarMult + hash
	server:
		BlindEvaluate(k, blinded_element) -> scalarMult -> ristretto255
		DeriveKeyPair(seed, info) -> HashToScalar (SHA512("HashToScalar-" || contextString)) + scalarMult -> ristrettpo255
	client&server:
		SerializeElement(element) -> ristretto255_encode
		DeserializeElement(buf) -> ristretto255_decode + check if output!=identity 
		Noe/Nok -> velkosti nejakych dat

2) KDF:
	Extract(salt, ikm)
	Expand(prk, info, L)
	Nx -> zase len nejaka velkost dat

	MAC(key, msg)
	Nm -> velkost vystupu z MAC

3) HASH -SHA512:
	Hash(msg)
	Nh -> velkost vystupu z hash f.


4) optional - Argon pre KSF, v drafte uvadzame identitu cize co ide na vstup do funkcie ide z nej aj rovno vylezie!
napr. a = F(a)
