// ******************************************************************
// ----------------- TECHNICAL UNIVERSITY OF KOSICE -----------------
// ---Department of Electronics and Multimedia Telecommunications ---
// -------- FACULTY OF ELECTRICAL ENGINEERING AND INFORMATICS -------
// ------------ THIS CODE IS A PART OF A MASTER'S THESIS ------------
// ------------------------- Master thesis --------------------------
// -----------------Patrik Zelenak & Milos Drutarovsky --------------
// ---------------------------version 0.0.1 -------------------------
// --------------------------- 11-10-2023 ---------------------------
// ******************************************************************



22.12 TODO:
buffer-cleaning, 
clinet-server na WIN,
podavat konstanty kde treba, 
vyhodit nepotrebne subory,
vytvorit kniznicu,
check grammar


14.12 DONE:
registration detailed description
following text to login phase
dokoncit login phase description
summary_of_opaque - registration stage
+ summary_of_opaque - login stage

14.12 TODO:
buffer-cleaning, 
clinet-server na WIN,
podavat konstanty kde treba, 
lepsia dokumentacia kodu,
vyhodit nepotrebne subory,
vytvorit kniznicu,
check grammar
+ summary_of_opaque - login stage

14.12 DONE:
registration detailed description
following text to login phase
dokoncit login phase description
summary_of_opaque - registration stage

-----------------------
13.12 TODO:
buffer-cleaning, 
clinet-server na WIN,
podavat konstanty kde treba,
lepsia dokumentacia kodu,
vyhodit nepotrebne subory,
vytvorit kniznicu,
dokoncit login phase description
check grammar


13.12 DONE:
registration detailed description
following text to login phase


In oprf.c Finalize function we can skip additional decode/encode probably?!

5.12.2023 decouple code (server/client)



README k opaque!


Nejake uzitocne linky:

1) high-level overview of curve25519 and modular inversion:

https://research.nccgroup.com/2020/09/28/faster-modular-inversion-and-legendre-symbol-and-an-x25519-speed-record/

2) math behind x25519:

https://asecuritysite.com/ecc/eddsa2

3) Barret reducion algo used in monocypher
https://www.nayuki.io/page/barrett-reduction-algorithm
https://handwiki.org/wiki/Barrett_reduction

Opaque in rust - viacmenej 'dobre' citatelny kod:
https://github.com/gustin/opaque/blob/master/src/lib.rs#L44

ristretto255:draft:
https://www.ietf.org/archive/id/draft-irtf-cfrg-ristretto255-00.html


opaque- draft:



Opaque C- impl. dobre citatelna/mozno..
https://github.com/aldenml/ecc/blob/master/src/ristretto255.h



IN OPRF.C DONT  FORGET TO PERFORM MEMORY CLEANUP!


HASH_TO_SCALAR:
https://github.com/cfrg/draft-irtf-cfrg-voprf/blob/main/poc/groups.sage
https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/blob/6d40f9890a5eb63ebfa0da9e49678e140e11f755/poc/hash_to_field.py

ASK:
1) ako sa v praxi riesi client-server komunikacia ked chcem checkovat nejake msg...

2) ake dalsie veci okrem: 
	buffer-cleaning, 
	clinet-server na WIN,
	podavat konstanty kde treba,
	lepsia dokumentacia kodu,
	vyhodit nepotrebne subory,
	vytvorit kniznicu,


4)...
https://tls13.xargs.org/#server-hello nieco ako toto
kazdy krok vlastny main a dobre dokumentuj


5) napis ziadost o praci v ANJ


// TEXT k DP:

URLs:
https://blog.cryptographyengineering.com/2018/10/19/lets-talk-about-pake/

https://posts.specterops.io/merlin-goes-opaque-for-key-exchange-420db3a58713

https://www.ietf.org/archive/id/draft-irtf-cfrg-opaque-12.html

https://blog.cloudflare.com/opaque-oblivious-passwords/

MATH begind OPRF:
https://blog.cloudflare.com/privacy-pass-the-math/

rozdelenie:

1) Configure Initial Parameters 
-------------------------------
	1.1) init Client credentials
		Client needs to choose username(identifier) and password.

	1.2) init Server credentials 
		{
			uint8_t server_private_key[32];
			uint8_t server_public_key[32];
			uint8_t oprf_seed[64];
		}
		- The server chooses a pair of keys (server_private_key
		and server_public_key) for the AKE, and chooses a seed
		(oprf_seed) of Nh bytes for the OPRF. The server can use 
		server_private_key and server_public_key with multiple
		clients. The server can also opt to use different seeds 
		for each client, so long as they are maintained across the
		registration and online AKE stages, and kept consistent 
		for each client (since an inconsistent mapping of clients 
		to seeds could leak information.

2) Offline Registration phase
-------------------------------
	server input: {
		 - server_public_key: The server public key for the AKE protocol.

		- credential_identifier: A unique identifier for the client's credential, generated by the server 

		- client_identity: An e-mail address or an account name (client's public key if nothing is provided).

		- oprf_seed: A seed used to derive per-client OPRF keys.

	}

	client input:
		- password
		- client_identity: An e-mail address or an account name (client's public key if nothing is provided). TODO maybe (client cred is written in draft)

	2.1) Create registration request
		Input:
			- password, an opaque byte string containing the client's password.

		Output:
			- request, a RegistrationRequest structure.
			- blind, an OPRF scalar value.

		- To begin the registration flow, the client executes the following function:

		def CreateRegistrationRequest(password):
		  (blind, blinded_element) = Blind(password)
		  blinded_message = SerializeElement(blinded_element)
		  Create RegistrationRequest request with blinded_message
		  return (request, blind)

		- Note that we are using Blind function, which is part 
		of OPRF protocol. Oblivious Pseudorandom Function (OPRF)
		is a two-party protocol between client and server for computing a PRF, 
		where the PRF key is held by the server and the input to the function
		is provided by the client. The client does not learn anything about the
		PRF other than the obtained output and the server learns nothing
		about the client's input or the function output. In other words
		OPRF is a protocol by which two parties compute a function F(key, x)
		that is deterministic but outputs random-looking values. 
		One party inputs the value x, and another party inputs the key - the party
		who inputs x learns the result F(key, x) but not the key, and the party
		providing the key learns nothing.

		- Essentially, math behind OPRF is pretty streight forward:
		(in OPRF terminology known as Signing Phase)
			0) Client hold input 't' (this could be password), Server holds secret key 'x'
			
			1) Client generates random 'blind' value, 
			which is just a random number from GF (Galois Field)						<------
																							   \
			2) Client computes T = H_1(t) and then blinds it by computing rT 			<--------- This (1,2,3)

																								|	includes our Blind() 
																								|	and Serialize Function, 
																								| since we are using ristretto255 hash_to_group we already Serialize element
																							   /
			3) Client sends M = rT to Server, note that M is known 						<------	
			 as blinded_element in our case
			
			4) Server computes Z = xM and returns Z to Clinet
			
			5) Clinet computes (1/r)*Z = xT = N and stores the pair (t,N) 
			for some point in the future

		Note: H_1() is collision resistant hash function. Note that output 
		of H_1() in this case is acctually serialized ristretto255_point (32-byte array) and 'r' is just a random scalar < L.
		We achieve serialized ristretto255_point by combining 2 functions:
			1) expand_message_xmd_sha512() -> to get uniformly distributed hash digest (bytes) 
			[https://www.rfc-editor.org/rfc/rfc9380.html#section-5.3.1]

			2) ristretto255 function called hash_to_group() to map hash digest to ristretto255 group 
			[https://www.ietf.org/archive/id/draft-irtf-cfrg-ristretto255-decaf448-08.html#section-4.3.4]


	2.2) Create registration response
		Step 4 represents our function called "createRegistrationResponse()", which 
		pseudocode is following:

		Input:
		- request, a RegistrationRequest structure.
		- server_public_key, the server's public key.
		- credential_identifier, an identifier that uniquely represents the credential.
		- oprf_seed, the seed of Nh bytes used by the server to generate an oprf_key.

		Output:
		- response, a RegistrationResponse structure.

		Exceptions:
		- DeserializeError, when OPRF element deserialization fails.
		- DeriveKeyPairError, when OPRF key derivation fails.

		def CreateRegistrationResponse(request, server_public_key,
		                               credential_identifier, oprf_seed):
		  seed = Expand(oprf_seed, concat(credential_identifier, "OprfKey"), Nok)
		  (oprf_key, _) = DeriveKeyPair(seed, "OPAQUE-DeriveKeyPair")

		  blinded_element = DeserializeElement(request.blinded_message)
		  evaluated_element = BlindEvaluate(oprf_key, blinded_element)
		  evaluated_message = SerializeElement(evaluated_element)

		  Create RegistrationResponse response with (evaluated_message, server_public_key)
		  return response


		- Note that all this function does is simple multiplication of blinded_element
		depicted as M (from step 3) by secret key x, which is really what's written in
		step 4 => Z = xM.

		- 'x' is secret key (oprf_key) which is generated in really specific way.
		First we 'expand' [credential_identifier+"OprfKey"] using hkdfExpand function 
		[https://datatracker.ietf.org/doc/html/rfc5869]
		based on sha512. Result of such expansion (seed) is uniformly distributed (random-looking)
		byte array of length Nok=32. 
		Then we derivate 'x' (oprf_key) from seed computed from previous step using DeriveKeyPair
		function [https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#section-3.2.1].

		- Lastly we need to multipy M (computed in step 3) by secret key 'x' (oprf_key). 
		This is done by BlindEvaluate() which is really just multiplication of ristretto255_point 
		by scalar 'x'. Note that to get ristretto255_point from ristretto255 byte-array element
		we need to first DeserializeElement and then multiply using BlindEvaluate. After 
		multiplication we deserialize ristretto255_point back to byte-array element.


	2.3) Finalize Registration Request
		Step 5 is a last step of OPRF Signing Phase, which is also last step of OPAQUE
		offline registration phase. This step is called "FinalizeRegistrationRequest()", which 
		pseudocode is following:

		Input:
		- password, an opaque byte string containing the client's password.
		- blind, an OPRF scalar value.
		- response, a RegistrationResponse structure.
		- server_identity, the optional encoded server identity.
		- client_identity, the optional encoded client identity.

		Output:
		- record, a RegistrationRecord structure.
		- export_key, an additional client key.

		Exceptions:
		- DeserializeError, when OPRF element deserialization fails.

		def FinalizeRegistrationRequest(password, blind, response, server_identity, client_identity):
		  evaluated_element = DeserializeElement(response.evaluated_message)
		  oprf_output = Finalize(password, blind, evaluated_element)

		  stretched_oprf_output = Stretch(oprf_output)
		  randomized_password = Extract("", concat(oprf_output, stretched_oprf_output))

		  (envelope, client_public_key, masking_key, export_key) =
		    Store(randomized_password, response.server_public_key,
		          server_identity, client_identity)
		  Create RegistrationRecord record with (client_public_key, masking_key, envelope)
		  return (record, export_key)

		 - As you can see in "FinalizeRegistrationRequest" pseudocode, Client starts with
		 deserializing evaluated element received from Server. Since, we already did this step
		 (client already posses a byte-array ristretto255 element) we can skip this step.
		 After that we use OPRF function called ";+()", which is essentially computing
		 unblindedElement = (1/r)*Z. In other words it performs: blind^-1 * evaluatedElement. There's one 
		 more step not mentioned previously and that is to create hash digest from (1/r)*Z, which can be written as H_( len(t) || t || len(unblindedElement) || unblindedElement || "Finalize"). Note that 't' is client input mentioned previously in step 0. In real-world this is usually client's password. More 
		 information about OPRF (version 0x00) can be found in official draft 
		 [ https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-voprf-21 ].


		 - This is all from OPRF side, but OPAQUE does not stop here yet. In process of OPAQUE offline registration there's one more step, an Envelope creation.
		 OPAQUE makes use of a structure called Envelope to manage client credentials. The client creates its Envelope (using function called "Store()") on registration and sends it to the server for storage. On every login, the server sends this Envelope to the client so it can recover its key material for use in the AKE (Authenticated Key Exchange). 

		 The key recovery mechanism defines its Envelope as follows:

			struct {
			  uint8 nonce[Nn];
			  uint8 auth_tag[Nm];
			} Envelope;
		nonce: A randomly-sampled nonce of length Nn, used to protect this Envelope.

		auth_tag: An authentication tag protecting the contents of the envelope, covering the envelope nonce and CleartextCredentials. There are mechanisms to create (client side) and recover (server-side) an Envelope. Function called "Store()" is used for Envelope creation and Recover used for Envelope recovery. These functions
		will be detaily described later. Now back to last step of OPAQUE's offline registration. After we compute oprf_output we perform a strengthen of oprf_output using KSF function such as Argon2id or scrypt. In our implementation we use Identity, which can be described as follows:

		 msg = IdentityStretch(msg),

		 that means we can simply skip this process (or use something like memcpy).
		 Next we extract a 'randomized_password' using hkdf function from 
		 oprf_output || strengthen_oprf_output. In our case oprf_output || oprf_output
		 since we used Identity.
		 Lastly client create Record(Envelope,client_public_key,masking_key) as well as export_key using Store() function.
		 Note that Record is datastructure that contains Envelope, client_public_key and masking_key.

	3) Online Authenticated Key Exchange
	------------------------------------

	In this second stage, a client obtains credentials previously registered 
	with the server, recovers private key material using the password, 
	and subsequently uses them as input to the AKE protocol. 
	As in the registration phase, the client inputs its credentials, 
	including its password and user identifier, and the server inputs 
	its parameters and the credential file record corresponding to the 
	client. The client outputs two values, an export_key (matching that
	from registration) and a session_key, the latter of which is the primary AKE output. 
	The server outputs a single value session_key that matches that of the client. 
	Upon completion, clients and servers can use these values as needed.


	This section describes the online authenticated key exchange protocol flow,
	message encoding, and helper functions. This stage is composed of a concurrent 
	OPRF and key exchange flow. The key exchange protocol is authenticated using 
	the client and server credentials established during registration.

	 In the end, the client proves its knowledge of the password, 
	 and both client and server agree on a mutually authenticated 
	 shared secret key and any optional application information
	 exchange during the handshake.

	 The client receives two outputs, a session secret and an export key. 
	 The export key is only available to the client and may be used for
	 additional application-specific purposes (e.g. use as secret key for 
	 encrypting data and store at remote, perhaps server's, storage). 
	 Clients and servers MUST NOT use the output export_key before 
	 authenticating the peer in the authenticated key exchange protocol. 
	 The server receives a single output, a session secret matching the client's.


	3.1) GenerateKE1

		State:
		- state, a ClientState structure.

		Input:
		- password, an opaque byte string containing the client's password.

		Output:
		- ke1, a KE1 message structure.

		def GenerateKE1(password):
		  request, blind = CreateCredentialRequest(password)
		  state.password = password
		  state.blind = blind
		  ke1 = AuthClientStart(request)
		  return ke1

	The login phase is very similar. It starts the same way as registration — with an OPRF flow. 
	However, on the server side, instead of generating a new OPRF key, Server instead looks up 
	the one he created during Clinet's registration. He does this by looking up Client’s username
	(which he provides in the first message), and retrieving his record of Client. 
	This record contains client's public key, his encrypted envelope, and Server’s OPRF key for Client.


	Server also sends over the encrypted envelope which Client can decrypt with the output of the OPRF flow. 
	(If decryption fails, Client aborts the protocol — this likely indicates that clinet typed his 
	password incorrectly, or Server isn’t who he says he is). If decryption succeeds, 
	clinet now has his own secret key and Server’s public key. Client inputs these into an AKE protocol
	with Server, who, in turn, inputs his private key and clinet's public key, 
	which gives them both a fresh shared secret key.

	First step of GenerateKE1 is to generate request and blind element. Request is a structure
	which contains blinded_message (blinded_element). In other words function 
	CreateCredentialRequest perform Blinding phase (similarly like in registration phase), so client needs to generate random blind value, computes T = H_1(t), where 't' is usually client's password and then blinds it by computing rT.

	Second step is to generate/fill up KE1 structure as well as Clients's state.

	struct {
	  uint8_t client_nonce[Nn]; 			// random value < L
	  uint8_t client_public_keyshare[Npk]; 	// clinet's public key generated by AuthClientStart()
	} AuthRequest;

	struct {
	  uint8_t blinded_message[Noe]; 		// blinded_element from 1'st step -> CreateCredentialRequest()
	} CredentialRequest; 

	struct {
	    uint8_t client_secret[Nsk]; 		// clinet's private key generated by AuthClientStart()
	    KE1 ke1;
	} ClientAkeState;

	struct {
	  CredentialRequest credential_request; 
	  AuthRequest auth_request;
	} KE1;

	struct {
	    uint8_t password[512]; 
	    int password_len;
	    uint8_t blind[Nok]; 				// random value < L
	    ClientAkeState client_ake_state;
	} ClientState;


	In summary, CreateCredentialRequest() generates blind (random number) and blinded_element
	which is Hash(t) * blind, where 't' is usually client's password.
	AuthClientStart() essentially generates public and private client's key using
	randomly generated seed. When Client obtains those values, he fill up ClientState and
	KE1 structure.	

	3.2) GenerateKE2

		State:
		- state, a ServerState structure.

		Input:
		- server_identity, the optional encoded server identity, which is set to
		  server_public_key if not specified.
		- server_private_key, the server's private key.
		- server_public_key, the server's public key.
		- record, the client's RegistrationRecord structure.
		- credential_identifier, an identifier that uniquely represents the credential.
		- oprf_seed, the server-side seed of Nh bytes used to generate an oprf_key.
		- ke1, a KE1 message structure.
		- client_identity, the optional encoded client identity, which is set to
		  client_public_key if not specified.

		Output:
		- ke2, a KE2 structure.

		def GenerateKE2(server_identity, server_private_key, server_public_key,
		               record, credential_identifier, oprf_seed, ke1, client_identity):
		  credential_response = CreateCredentialResponse(ke1.credential_request, server_public_key, record,
		    credential_identifier, oprf_seed)
		  cleartext_credentials = CreateCleartextCredentials(server_public_key,
		                      record.client_public_key, server_identity, client_identity)
		  auth_response = AuthServerRespond(cleartext_credentials, server_private_key,
		                      record.client_public_key, ke1, credential_response)
		  Create KE2 ke2 with (credential_response, auth_response)
		  return ke2

	As naming suggests CreateCredentialResponse in GenerateKE2 create Credantial response from
	server, which structure is following:

	struct{
	  uint8_t evaluated_message[Noe];
	  uint8_t masking_nonce[Nn]; // by server - randomly generated < L
	  uint8_t masked_response[Npk + Nn + Nm];
	} CredentialResponse;

	CreateCleartextCredentials works in few steps:

			1.) seed = hkdfExpand(credential_identifier || "OprfKey") 
			2.) generate  oprf_key based on seed
			3.) multiply: evaluated_message = blinded_message (sent by Clinet in KE1) * oprf_key (scaler computed before)

			----- Note that until now it is very similar to steps in section 2.2 during offline registration----

			4.) create masking_key = hkdfExpand(masking_nonce || "CredentialResponsePad")
			5.) create masked_response =  server_public_key XOR Envelope  // Envelope acqired from client's KE1

	Other half of GenerateKE2 function is acctual part of AKE protocol using "AuthServerRespond()".
	AuthServerRespond constists of these steps:

		1.) generate server_secret_key and server_keyshare_key
		2.) construct preamble = "OPAQUEv1-" || len(context) || context
		|| len(client_identity) || client_identity || ke1
		|| len(server_identity) || server_identity
		|| KE2

		3.) TripleDHIKM simply returns ikm (input key material):
			3.1) dh1 = sk1 * pk1 		// server_secret_key * client_public_keyshare
	     	3.2) dh2 = sk2 * pk2		// server_private_key * client_public_keyshare
	     	3.3) dh3 = sk3 * pk3		// server_secret_key * client_public_key
	     	3.4) ikm = dh1 || dh2 || dh3

	     	Note that sks and pks are input values.

	     4.) Derive km2, km3, session_key keys from preamble and ikm
	     - basically this is nothing else than usage of hkdfExtract and hkdmExpand multiple time:

	     	4.1) prk = hkdfExtract(ikm)

	     	4.2) create hash of preamble, preamble_hash = Hash(preamble)

	     	4.3) handshake_secret = hkdfExpand(prk,Nx || preamble_secret_label_len || "OPAQUE-" || preamble_secret_label || preamble_hash_len || preamble_hash);

	     	4.4) session_key = hkdfExpand(prk, Nx || 10 || "OPAQUE-" || "SessionKey" || preamble_hash_len || preamble_hash)

	     	4.5) km2 = hkdfExpand(handshake_secret, Nx || 9 || "OPAQUE-" || "ServerMAC" || 0 || NULL);

	     	4.6) km3 = hkdfExpand(handshake_secret, Nx || 9 || "OPAQUE-" || "ClientMAC" || 0 || NULL);
			
	     5.) calculate server mac:
	     	server_mac = hmac(Km2, Hash(preamble))

	     6.) calculate expected client mac:
	     	expected_client_mac = hmac(Km3, Hash(preamble || server_mac))


	    struct {
		  uint8_t evaluated_message[Noe]; 			// by CreateCredentialResponse()
		  uint8_t masking_nonce[Nn];				// by CreateCredentialResponse()
		  uint8_t masked_response[Npk + Nn + Nm];	// by CreateCredentialResponse()
		} CredentialResponse;

	    struct {
		  uint8_t server_nonce[Nn];					// random < L
		  uint8_t server_public_keyshare[Npk];		// from AuthServerRespond()
		  uint8_t server_mac[Nm];					// from AuthServerRespond()
		} AuthResponse;

	 	struct {
		  CredentialResponse credential_response;
		  AuthResponse auth_response;
		} KE2;

		struct {
		    uint8_t expected_client_mac[Nm]; 		// from AuthServerRespond()
		    uint8_t session_key[Nx]; 				// from AuthServerRespond()
		} ServerState;

	3.3) GenerateKE3

		State:
		- state, a ClientState structure.

		Input:
		- client_identity, the optional encoded client identity, which is set
		  to client_public_key if not specified.
		- server_identity, the optional encoded server identity, which is set
		  to server_public_key if not specified.
		- ke2, a KE2 message structure.

		Output:
		- ke3, a KE3 message structure.
		- session_key, the session's shared secret.
		- export_key, an additional client key.

		def GenerateKE3(client_identity, server_identity, ke2):
		  (client_private_key, cleartext_credentials, export_key) =
		    RecoverCredentials(state.password, state.blind, ke2.credential_response,
		                       server_identity, client_identity)
		  (ke3, session_key) =
		    AuthClientFinalize(cleartext_credentials, client_private_key, ke2)
		  return (ke3, session_key, export_key)


	Third step of AKE is initiated on Clinet. Client needs to recover his credentials using
	RecoverCredentials() function. The output of RecoverCredentials function is client_private_key (in our impl. also public key), cleartext_credentials, export_key.
	As we mentioned previously export_key could be used for application specific purposes 
	e.g. encrypted remote storage example. Note that RecoverCredentials() contains OPRF step of Finalization,which is essentially computing unblindedElement = (1/r)*Z. In other words it performs: blind^-1 * evaluatedElement. This is very similar to process of Finalize Registration Request described in step 2.3, except now we don't create
	an Envelope, but we Recover envelope.

	After retrieving values from RecoverCredentials() function, client needs to create KE3
	message and retrieve session_key using AuthClientFinalize(). This step is very similar to AuthServerRespond() used by server when generating KE2 message, which is:
		1.) TripleDHIKM simply returns ikm (input key material)
			1.1) dh1 = sk1 * pk1 		// client_secret_key * server_public_keyshare
	     	1.2) dh2 = sk2 * pk2		// client_secret_key * server_public_keyshare
	     	1.3) dh3 = sk3 * pk3		// client_private_key * server_public_keyshare
	     	1.4) ikm = dh1 || dh2 || dh3

	    2.) construct preamble = "OPAQUEv1-" || len(context) || context
		|| len(client_identity) || client_identity || ke1
		|| len(server_identity) || server_identity
		|| KE2

	    3.) Derive km2, km3, session_key keys from preamble and ikm
	     - basically this is nothing else than usage of hkdfExtract and hkdmExpand multiple time, just like when generating KE2 message.

	    4.) calculate expected server mac:
	     	expected_server_mac = hmac(km2, Hash(preamble))

	     	and if ke2.server_mac is not equal to expected_server_mac,
	     	then raise error.

	    5.) calculate client mac (client_mac is parto of AKE3 message):
	     	client_mac = hmac(km3, Hash(preamble || expected_server_mac))

















